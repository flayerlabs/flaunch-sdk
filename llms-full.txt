# Flaunch SDK

[![npm version](https://img.shields.io/npm/v/@flaunch/sdk.svg)](https://npmjs.com/package/@flaunch/sdk)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A TypeScript SDK for seamless interaction with the Flaunch protocol and Uniswap V4.

![Flaunch Header](https://raw.githubusercontent.com/flayerlabs/flaunch-sdk/refs/heads/master/.github/flaunch-header.png)

_Note: Add this `llms-full.txt` file into Cursor IDE / LLMs to provide context about using the Flaunch SDK: [llms-full.txt](https://raw.githubusercontent.com/flayerlabs/flaunch-sdk/refs/heads/master/llms-full.txt)_

## Features

- üöÄ Flaunch new memecoins
- üí± Buy and sell memecoins via Uniswap V4 hooks
- üèóÔ∏è Build your own token launchpads on top of the flaunch protocol
- üìä Read functions for token and pool data
- üîí Built-in Permit2 support for gasless approvals
- üîµ Works on Base and Base Sepolia networks

## Table of Contents

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Usage](#usage)
  - [Read Operations](#read-operations-with-viem)
  - [Write Operations](#write-operations-with-viem--wagmi)
  - [Selling with Permit2](#selling-with-permit2)
  - [Flaunching a Memecoin](#flaunching-a-memecoin)
    - [How to generate Base64Image from file upload](#how-to-generate-base64image-from-user-uploaded-file)
  - [Advanced Integration: Revenue Sharing with RevenueManager](#advanced-integration-revenue-sharing-with-revenuemanager)
  - [All SDK functions](#all-sdk-functions)
  - [React Hooks](#react-hooks)
- [Flaunch Docs](#flaunch-reference)

## Installation

Using pnpm (recommended):

```bash
pnpm add @flaunch/sdk
```

Using npm:

```bash
npm install @flaunch/sdk
```

Using yarn:

```bash
yarn add @flaunch/sdk
```

## Quick Start

Here's a simple example to get started with reading token metadata:

```ts
import { createFlaunch } from "@flaunch/sdk";
import { createPublicClient, http } from "viem";
import { base } from "viem/chains";

const publicClient = createPublicClient({
  chain: base,
  transport: http(),
});

const flaunchRead = createFlaunch({ publicClient });
const { symbol, name, image } = await flaunchRead.getCoinMetadata(coinAddress);
// returns: {symbol: "TEST", name: "Test", image: "https://<IMAGE_URL>"}
```

## Usage

The SDK provides two types of operations:

1. Read operations: Only require a `publicClient`
2. Write operations: Require both `publicClient` and `walletClient`

### Read Operations (with Viem)

```ts
import { createFlaunch } from "@flaunch/sdk";
import { createPublicClient, http } from "viem";
import { base } from "viem/chains";

const publicClient = createPublicClient({
  chain: base,
  transport: http("<RPC_URL>"), // "<RPC_URL>" is optional, defaults to public RPC
});

const flaunchRead = createFlaunch({ publicClient });

// Read token metadata
const { symbol, name, image } = await flaunchRead.getCoinMetadata(coinAddress);
// returns: {symbol: "TEST", name: "Test", image: "https://<IMAGE_URL>"}
```

### Write Operations (with Viem + Wagmi)

For write operations, you'll need both Viem and Wagmi. Here's how to set it up in a React component:

```ts
import { createFlaunch, ReadWriteFlaunchSDK } from "@flaunch/sdk";
import { base } from "viem/chains";
import { useWalletClient } from "wagmi";
import { useMemo } from "react";

// ... your React component ...

const publicClient = createPublicClient({
  chain: base,
  transport: http("<RPC_URL>"), // "<RPC_URL>" is optional, defaults to public RPC
});
const { data: walletClient } = useWalletClient();

const flaunchWrite = useMemo(() => {
  if (!publicClient && !walletClient) return null;

  return createFlaunch({
    publicClient,
    walletClient,
  }) as ReadWriteFlaunchSDK;
}, [publicClient, walletClient]);

// Execute a buy transaction
const buyTokens = async () => {
  const hash = await flaunchWrite.buyCoin({
    coinAddress,
    slippagePercent: 5,
    swapType: "EXACT_IN",
    amountIn: parseEther("0.1"),
  });

  // Wait for confirmation
  const receipt = await flaunchWrite.drift.waitForTransaction({ hash });
  console.log(receipt.status === "success" ? "Success" : "Failed");
};
```

### Selling with Permit2

Permit2 enables gasless token approvals. Here's how to implement token selling with Permit2:

```ts
import { useSignTypedData } from "wagmi";
import { parseEther, Hex } from "viem";

const {
  signTypedData,
  status: sigStatus,
  error: sigError,
  data: signature,
} = useSignTypedData();

// Check allowance and permit if needed
const { allowance } = await flaunchWrite.getPermit2AllowanceAndNonce(
  coinAddress
);

if (allowance < parseEther(coinAmount)) {
  const { typedData, permitSingle } = await flaunchWrite.getPermit2TypedData(
    coinAddress
  );
  signTypedData(typedData);

  // then call this when signature is not undefined
  const hash = await flaunchWrite.sellCoin({
    coinAddress,
    amountIn: parseEther(coinAmount),
    slippagePercent: 5,
    permitSingle,
    signature,
  });
} else {
  // if already approved
  const hash = await flaunchWrite.sellCoin({
    coinAddress,
    amountIn: parseEther(coinAmount),
    slippagePercent: 5,
  });
}
```

### Flaunching a Memecoin

Flaunch your own memecoin with default parameters:

_**Flaunches below $10k market caps don't incur any protocol fees!**_

```ts
const hash = await flaunchWrite.flaunchIPFS({
  name: "Test",
  symbol: "TEST",
  fairLaunchPercent: 60, // 60%
  fairLaunchDuration: 30 * 60, // 30 mins
  initialMarketCapUSD: 10_000, // $10k
  creator: address,
  creatorFeeAllocationPercent: 80, // 80% to creator, 20% to community
  metadata: {
    base64Image: imageData, // refer to the code below, on how to generate this base64Image
    description: "Your memecoin description",
    // optional:
    websiteUrl: "https://example.com/",
    discordUrl: "https://discord.gg/example",
    twitterUrl: "https://x.com/example",
    telegramUrl: "https://t.me/example",
  },
  pinataConfig: {
    // Use one-time JWT for client-side uploads
    // Refer: https://www.pinata.cloud/blog/how-to-upload-to-ipfs-from-the-frontend-with-signed-jwts/
    jwt: pinataJWT,
  },
});
```

#### How to generate `base64Image` from User uploaded file

```tsx
// handle image file input and convert into base64
const handleImageChange = useCallback(
  (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];

      // read the file as base64
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64String = reader.result as string;

        // this can be passed to the flaunch function call
        handleFlaunch({ imageData: base64String });

        // use `storedImagePreview` to display the uploaded image with <image src={storedImagePreview} />
        setStoredImagePreview(base64String);
      };
      reader.readAsDataURL(file);
    }
  },
  [setStoredImagePreview]
);

// File upload input
<input
  type="file"
  accept="image/*"
  onchange="handleImageChange(event)"
  id="image-upload"
/>;
```

### Advanced Integration: Revenue Sharing with RevenueManager

For platforms building on top of Flaunch, the `RevenueManager` contract enables sophisticated revenue-sharing models. It allows platforms to automatically take a protocol fee from the trading fees generated by memecoins launched through their integration.

**Key Concepts:**

1.  **Deployment & Initialization**: Before flaunching tokens via your platform, deploy an instance of your `RevenueManager` with your protocol fee and recipient address.

```ts
const revenueManagerInstanceAddress = await flaunchWrite.deployRevenueManager({
  protocolRecipient: "0xabc...",
  protocolFeePercent: 20, // 20% revenue share between protocol and 80% to coin creators (of the 1% swap fees)
});
```

2.  **Flaunching Directly to Manager**: Instead of the creator receiving the Flaunch NFT, you'd flaunch the token directly into the `RevenueManager`. This automatically sets up the fee split.

```ts
await flaunchWrite.flaunchIPFSWithRevenueManager({
  name: "...",
  symbol: "...",
  metadata: {
    base64Image: "...",
  },
  pinataConfig: {
    jwt: "...",
  },
  fairLaunchPercent: 40,
  fairLaunchDuration: 30 * 60, // 30 mins
  initialMarketCapUSD: 1_000,
  creator: "0x...",
  creatorFeeAllocationPercent: 100,
  // **Note:** Specify your instance of the RevenueManager here
  revenueManagerInstanceAddress: "...",
});
```

3.  **Claiming Fees**: Creators can claim their share of earned fees, and the protocol can claim its share via the `RevenueManager` contract.

```ts
// check address' balance
const balance = await flaunchRead.revenueManagerBalance({
  revenueManagerAddress: revenueManagerInstanceAddress,
  recipient: "0xabc...",
});

// protocol claim: the connected wallet must be the protocol recipient for the revenue manager
await flaunchWrite.revenueManagerProtocolClaim({
  revenueManagerAddress: revenueManagerInstanceAddress,
});

// creator claim: the connected wallet must be the coin's creator for them to claim their share
await flaunchWrite.revenueManagerCreatorClaim({
  revenueManagerAddress: revenueManagerInstanceAddress,
});

// creator claim: for specific flaunch token ids:
await flaunchWrite.revenueManagerCreatorClaimForTokens({
  revenueManagerAddress: revenueManagerInstanceAddress,
  flaunchTokens: [
    {
      flaunch: FlaunchAddress[base.id],
      tokenId: 5,
    },
    {
      flaunch: FlaunchV1_1Address[base.id],
      tokenId: 10,
    },
  ],
});
```

Refer to the [RevenueManager Docs](https://docs.flaunch.gg/manager-types/revenuemanager) for detailed implementation guides and function references.

### All SDK functions

For a list of all the functions in the SDK, refer to: [FlaunchSDK.ts](./src/sdk/FlaunchSDK.ts)

### React Hooks

The package also has hooks to listen for new Flaunches and new Coin Swaps. Refer to: [hooks](./src/hooks/FlaunchPositionManagerHooks.ts)

```tsx
import { usePoolCreatedEvents, usePoolSwapEvents } from "@flaunch/sdk/hooks";

const { logs: poolCreatedLogs } = usePoolCreatedEvents(flaunchRead);
const { logs: poolSwapLogs } = usePoolSwapEvents(flaunchRead, coinAddress);

/**
 * The `poolSwapLogs` calculates & returns the net swapped amount:
 *
 * type BuySwapLog = {
 *  ...eventLog,
 *  timestamp: number;
 *  type: "BUY";
 *   delta: {
 *     coinsBought: bigint;
 *     flETHSold: bigint;
 *     fees: {
 *       isInFLETH: boolean;
 *       amount: bigint;
 *     };
 *   };
 * };
 *
 * type SellSwapLog = {
 *  ...eventLog,
 *  timestamp: number;
 *  type: "SELL";
 *   delta: {
 *     coinsSold: bigint;
 *     flETHBought: bigint;
 *     fees: {
 *       isInFLETH: boolean;
 *       amount: bigint;
 *     };
 *   };
 * };
 */
```

## Flaunch Reference

For detailed protocol documentation, visit our [Docs](https://docs.flaunch.gg/).


# API Documentation

@flaunch/sdk - v0.8.0 / Exports / ReadFlaunchSDK

# Class: ReadFlaunchSDK

Base class for interacting with Flaunch protocol in read-only mode

## Hierarchy

- **`ReadFlaunchSDK`**

  ‚Ü≥ `ReadWriteFlaunchSDK`

## Table of contents

### Constructors

- constructor

### Properties

- TICK\_SPACING
- chainId
- drift
- readAnyPositionManager
- readBidWall
- readBidWallV1\_1
- readFairLaunch
- readFairLaunchV1\_1
- readFeeEscrow
- readFlaunch
- readFlaunchV1\_1
- readFlaunchZap
- readPermit2
- readPoolManager
- readPositionManager
- readPositionManagerV1\_1
- readQuoter
- readReferralEscrow
- readStateView
- resolveIPFS

### Methods

- bidWallPosition
- coinMarketCapInUSD
- coinPriceInETH
- coinPriceInUSD
- creatorRevenue
- currentTick
- ethRequiredToFlaunch
- fairLaunchCoinOnlyPosition
- fairLaunchDuration
- fairLaunchETHOnlyPosition
- fairLaunchInfo
- flETHIsCurrencyZero
- getBidWall
- getBidWallAddress
- getBuyQuoteExactInput
- getBuyQuoteExactOutput
- getCoinMetadata
- getCoinMetadataFromTokenId
- getCoinMetadataFromTokenIds
- getCoinVersion
- getETHUSDCPrice
- getFairLaunch
- getFairLaunchAddress
- getFlaunchingFee
- getPositionManager
- getPositionManagerAddress
- getSellQuoteExactInput
- initialSqrtPriceX96
- initialTick
- isFairLaunchActive
- isValidCoin
- pollPoolCreatedNow
- pollPoolSwapNow
- poolId
- positionInfo
- referralBalance
- revenueManagerAllTokensByCreator
- revenueManagerAllTokensInManager
- revenueManagerBalance
- revenueManagerProtocolBalance
- revenueManagerTokensCount
- setIPFSResolver
- watchPoolCreated
- watchPoolSwap

## Constructors

### constructor

‚Ä¢ **new ReadFlaunchSDK**(`chainId`, `drift?`): `ReadFlaunchSDK`

Parameters

| Name | Type |
| :------ | :------ |
| `chainId` | `number` |
| `drift` | `Drift` |

Returns

`ReadFlaunchSDK`

## Properties

### TICK\_SPACING

‚Ä¢ `Readonly` **TICK\_SPACING**: ``60``

___

### chainId

‚Ä¢ `Readonly` **chainId**: `number`

___

### drift

‚Ä¢ `Readonly` **drift**: `Drift`

___

### readAnyPositionManager

‚Ä¢ `Readonly` **readAnyPositionManager**: `ReadAnyPositionManager`

___

### readBidWall

‚Ä¢ `Readonly` **readBidWall**: `ReadBidWall`

___

### readBidWallV1\_1

‚Ä¢ `Readonly` **readBidWallV1\_1**: `ReadBidWallV1_1`

___

### readFairLaunch

‚Ä¢ `Readonly` **readFairLaunch**: `ReadFairLaunch`

___

### readFairLaunchV1\_1

‚Ä¢ `Readonly` **readFairLaunchV1\_1**: `ReadFairLaunchV1_1`

___

### readFeeEscrow

‚Ä¢ `Readonly` **readFeeEscrow**: `ReadFeeEscrow`

___

### readFlaunch

‚Ä¢ `Readonly` **readFlaunch**: `ReadFlaunch`

___

### readFlaunchV1\_1

‚Ä¢ `Readonly` **readFlaunchV1\_1**: `ReadFlaunchV1_1`

___

### readFlaunchZap

‚Ä¢ `Readonly` **readFlaunchZap**: `ReadFlaunchZap`

___

### readPermit2

‚Ä¢ `Readonly` **readPermit2**: `ReadPermit2`

___

### readPoolManager

‚Ä¢ `Readonly` **readPoolManager**: `ReadPoolManager`

___

### readPositionManager

‚Ä¢ `Readonly` **readPositionManager**: `ReadFlaunchPositionManager`

___

### readPositionManagerV1\_1

‚Ä¢ `Readonly` **readPositionManagerV1\_1**: `ReadFlaunchPositionManagerV1_1`

___

### readQuoter

‚Ä¢ `Readonly` **readQuoter**: `ReadQuoter`

___

### readReferralEscrow

‚Ä¢ `Readonly` **readReferralEscrow**: `ReadReferralEscrow`

___

### readStateView

‚Ä¢ `Readonly` **readStateView**: `ReadStateView`

___

### resolveIPFS

‚Ä¢ **resolveIPFS**: (`value`: `string`) => `string`

Type declaration

‚ñ∏ (`value`): `string`

#Parameters

| Name | Type |
| :------ | :------ |
| `value` | `string` |

#Returns

`string`

## Methods

### bidWallPosition

‚ñ∏ **bidWallPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `pendingEth`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the bid wall position for a coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `pendingEth`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, pendingEth: bigint, tickLower: number, tickUpper: number}> - Bid wall position details

___

### coinMarketCapInUSD

‚ñ∏ **coinMarketCapInUSD**(`¬´destructured¬ª`): `Promise`\<`string`\>

Parameters

| Name | Type |
| :------ | :------ |
| `¬´destructured¬ª` | `Object` |
| ‚Ä∫¬†`coinAddress` | \`0x$\{string}\` |
| ‚Ä∫¬†`drift?` | `Drift` |
| ‚Ä∫¬†`version?` | `FlaunchVersion` |

Returns

`Promise`\<`string`\>

___

### coinPriceInETH

‚ñ∏ **coinPriceInETH**(`coinAddress`, `version?`): `Promise`\<`string`\>

Calculates the coin price in ETH based on the current tick

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`string`\>

Promise<string> - The price of the coin in ETH with 18 decimals precision

___

### coinPriceInUSD

‚ñ∏ **coinPriceInUSD**(`¬´destructured¬ª`): `Promise`\<`string`\>

Calculates the coin price in USD based on the current ETH/USDC price

Parameters

| Name | Type |
| :------ | :------ |
| `¬´destructured¬ª` | `Object` |
| ‚Ä∫¬†`coinAddress` | \`0x$\{string}\` |
| ‚Ä∫¬†`drift?` | `Drift` |
| ‚Ä∫¬†`version?` | `FlaunchVersion` |

Returns

`Promise`\<`string`\>

Promise<string> - The price of the coin in USD with 2 decimal precision

___

### creatorRevenue

‚ñ∏ **creatorRevenue**(`creator`, `isV1?`): `Promise`\<`bigint`\>

Gets the ETH balance for the creator to claim

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `creator` | \`0x$\{string}\` | The address of the creator to check |
| `isV1?` | `boolean` | Optional boolean to check the balance for V1. V1.1 & AnyPositionManager use the same FeeEscrow contract |

Returns

`Promise`\<`bigint`\>

The balance of the creator

___

### currentTick

‚ñ∏ **currentTick**(`coinAddress`, `version?`): `Promise`\<`number`\>

Gets the current tick for a given coin's pool

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number`\>

Promise<number> - The current tick of the pool

___

### ethRequiredToFlaunch

‚ñ∏ **ethRequiredToFlaunch**(`params`): `Promise`\<`bigint`\>

Calculates the ETH required to flaunch a token, takes into account the ETH for premine and the flaunching fee

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | - |
| `params.initialMarketCapUSD` | `number` | The initial market cap in USD |
| `params.premineAmount` | `bigint` | The amount of coins to be premined |
| `params.slippagePercent?` | `number` | The slippage percent |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The ETH required to flaunch

___

### fairLaunchCoinOnlyPosition

‚ñ∏ **fairLaunchCoinOnlyPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the coin-only position in a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, tickLower: number, tickUpper: number}> - Position details

___

### fairLaunchDuration

‚ñ∏ **fairLaunchDuration**(`coinAddress`, `version?`): `Promise`\<`number` \| `bigint`\>

Gets the duration of a fair launch for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number` \| `bigint`\>

Promise<number> - The duration in seconds (30 minutes for V1, variable for V1.1)

___

### fairLaunchETHOnlyPosition

‚ñ∏ **fairLaunchETHOnlyPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the ETH-only position in a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, tickLower: number, tickUpper: number}> - Position details

___

### fairLaunchInfo

‚ñ∏ **fairLaunchInfo**(`coinAddress`, `version?`): `Promise`\<\{ `closed`: `boolean` ; `endsAt`: `bigint` ; `initialTick`: `number` ; `revenue`: `bigint` ; `startsAt`: `bigint` ; `supply`: `bigint`  }\>

Gets information about a fair launch for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `closed`: `boolean` ; `endsAt`: `bigint` ; `initialTick`: `number` ; `revenue`: `bigint` ; `startsAt`: `bigint` ; `supply`: `bigint`  }\>

Fair launch information from the appropriate contract version

___

### flETHIsCurrencyZero

‚ñ∏ **flETHIsCurrencyZero**(`coinAddress`): `boolean`

Determines if flETH is currency0 in the pool

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`boolean`

boolean - True if flETH is currency0, false otherwise

___

### getBidWall

‚ñ∏ **getBidWall**(`version`): `ReadBidWall` \| `ReadBidWallV1_1`

Gets the bid wall address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the bid wall address for |

Returns

`ReadBidWall` \| `ReadBidWallV1_1`

___

### getBidWallAddress

‚ñ∏ **getBidWallAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

___

### getBuyQuoteExactInput

‚ñ∏ **getBuyQuoteExactInput**(`coinAddress`, `amountIn`, `version?`): `Promise`\<`bigint`\>

Gets a quote for buying tokens with an exact amount of ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to buy |
| `amountIn` | `bigint` | - |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The expected amount of tokens to receive

___

### getBuyQuoteExactOutput

‚ñ∏ **getBuyQuoteExactOutput**(`coinAddress`, `amountOut`, `version?`): `Promise`\<`bigint`\>

Gets a quote for buying an exact amount of tokens with ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to buy |
| `amountOut` | `bigint` | - |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The required amount of ETH to spend

___

### getCoinMetadata

‚ñ∏ **getCoinMetadata**(`coinAddress`): `Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Retrieves metadata for a given Flaunch coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Promise<CoinMetadata & { symbol: string }> - The coin's metadata including name, symbol, description, and social links

___

### getCoinMetadataFromTokenId

‚ñ∏ **getCoinMetadataFromTokenId**(`flaunch`, `tokenId`): `Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Retrieves metadata for a given Flaunch coin using its token ID & Flaunch contract address

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `flaunch` | \`0x$\{string}\` | The address of the Flaunch contract |
| `tokenId` | `bigint` | The token ID of the coin |

Returns

`Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

The coin's metadata including name, symbol, description, and social links

___

### getCoinMetadataFromTokenIds

‚ñ∏ **getCoinMetadataFromTokenIds**(`params`, `batchSize?`, `batchDelay?`): `Promise`\<\{ `coinAddress`: \`0x$\{string}\` ; `collaborators`: `any` ; `description`: `any` ; `discordUrl`: `any` ; `external_link`: `any` ; `image`: `string` ; `name`: `string` ; `symbol`: `string` ; `telegramUrl`: `any` ; `twitterUrl`: `any`  }[]\>

Retrieves metadata for multiple Flaunch coins using their token IDs & Flaunch contract addresses

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[] | `undefined` | An array of objects containing flaunch contract address and token ID |
| `batchSize` | `number` | `9` | Optional, the number of ipfs requests to process in each batch |
| `batchDelay` | `number` | `500` | Optional, the delay in milliseconds between batches |

Returns

`Promise`\<\{ `coinAddress`: \`0x$\{string}\` ; `collaborators`: `any` ; `description`: `any` ; `discordUrl`: `any` ; `external_link`: `any` ; `image`: `string` ; `name`: `string` ; `symbol`: `string` ; `telegramUrl`: `any` ; `twitterUrl`: `any`  }[]\>

An array of objects containing coin address, name, symbol, description, and social links

___

### getCoinVersion

‚ñ∏ **getCoinVersion**(`coinAddress`): `Promise`\<`FlaunchVersion`\>

Determines the version of a Flaunch coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<`FlaunchVersion`\>

Promise<FlaunchVersion> - The version of the coin

___

### getETHUSDCPrice

‚ñ∏ **getETHUSDCPrice**(`drift?`): `Promise`\<`number`\>

Gets the current ETH/USDC price

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `drift?` | `Drift` | Optional drift instance to get price from Base Mainnet |

Returns

`Promise`\<`number`\>

Promise<number> - The current ETH/USDC price

___

### getFairLaunch

‚ñ∏ **getFairLaunch**(`version`): `ReadFairLaunch` \| `ReadFairLaunchV1_1`

Gets the fair launch address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the fair launch address for |

Returns

`ReadFairLaunch` \| `ReadFairLaunchV1_1`

___

### getFairLaunchAddress

‚ñ∏ **getFairLaunchAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

___

### getFlaunchingFee

‚ñ∏ **getFlaunchingFee**(`params`): `Promise`\<`bigint`\>

Gets the flaunching fee for a given initial price and slippage percent

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | - |
| `params.initialMarketCapUSD` | `number` | The initial market cap in USD |
| `params.sender` | \`0x$\{string}\` | The address of the sender |
| `params.slippagePercent?` | `number` | The slippage percent |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The flaunching fee

___

### getPositionManager

‚ñ∏ **getPositionManager**(`version`): `ReadFlaunchPositionManager` \| `ReadFlaunchPositionManagerV1_1` \| `ReadAnyPositionManager`

Gets the position manager address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the position manager address for |

Returns

`ReadFlaunchPositionManager` \| `ReadFlaunchPositionManagerV1_1` \| `ReadAnyPositionManager`

___

### getPositionManagerAddress

‚ñ∏ **getPositionManagerAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

___

### getSellQuoteExactInput

‚ñ∏ **getSellQuoteExactInput**(`coinAddress`, `amountIn`, `version?`): `Promise`\<`bigint`\>

Gets a quote for selling an exact amount of tokens for ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to sell |
| `amountIn` | `bigint` | The exact amount of tokens to sell |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The expected amount of ETH to receive

___

### initialSqrtPriceX96

‚ñ∏ **initialSqrtPriceX96**(`params`): `Promise`\<`bigint`\>

Parameters

| Name | Type |
| :------ | :------ |
| `params` | `Object` |
| `params.coinAddress` | \`0x$\{string}\` |
| `params.initialMarketCapUSD` | `number` |

Returns

`Promise`\<`bigint`\>

___

### initialTick

‚ñ∏ **initialTick**(`coinAddress`, `version?`): `Promise`\<`number`\>

Gets the initial tick for a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number`\>

Promise<number> - The initial tick value

___

### isFairLaunchActive

‚ñ∏ **isFairLaunchActive**(`coinAddress`, `version?`): `Promise`\<`boolean`\>

Checks if a fair launch is currently active for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`boolean`\>

Promise<boolean> - True if fair launch is active, false otherwise

___

### isValidCoin

‚ñ∏ **isValidCoin**(`coinAddress`): `Promise`\<`boolean`\>

Checks if a given coin address is a valid Flaunch coin (supports all versions)

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<`boolean`\>

Promise<boolean> - True if the coin is valid, false otherwise

___

### pollPoolCreatedNow

‚ñ∏ **pollPoolCreatedNow**(`version?`): `undefined` \| `Promise`\<`void`\>

Polls for current pool creation events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`undefined` \| `Promise`\<`void`\>

Current pool creation events or undefined if polling is not available

___

### pollPoolSwapNow

‚ñ∏ **pollPoolSwapNow**(`version?`): `undefined` \| `Promise`\<`void`\>

Polls for current pool swap events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`undefined` \| `Promise`\<`void`\>

Current pool swap events or undefined if polling is not available

___

### poolId

‚ñ∏ **poolId**(`coinAddress`, `version?`): `Promise`\<\`0x$\{string}\`\>

Gets the pool ID for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<\`0x$\{string}\`\>

Promise<string> - The pool ID

___

### positionInfo

‚ñ∏ **positionInfo**(`params`): `Promise`\<\{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  } \| \{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  }\>

Gets information about a liquidity position

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `PositionInfoParams` | Parameters for querying position info |

Returns

`Promise`\<\{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  } \| \{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  }\>

Position information from the state view contract

___

### referralBalance

‚ñ∏ **referralBalance**(`recipient`, `coinAddress`): `Promise`\<`bigint`\>

Gets the balance of a recipient for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `recipient` | \`0x$\{string}\` | The address of the recipient to check |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The balance of the recipient

___

### revenueManagerAllTokensByCreator

‚ñ∏ **revenueManagerAllTokensByCreator**(`params`): `Promise`\<readonly \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Gets all tokens created by a specific creator address

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for querying tokens by creator |
| `params.creator` | \`0x$\{string}\` | The address of the creator to query tokens for |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |
| `params.sortByDesc?` | `boolean` | Whether to sort the tokens by descending order |

Returns

`Promise`\<readonly \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Promise<Array<{flaunch: Address, tokenId: bigint}>> - Array of token objects containing flaunch address and token ID

___

### revenueManagerAllTokensInManager

‚ñ∏ **revenueManagerAllTokensInManager**(`params`): `Promise`\<\{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Gets all tokens currently managed by a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for querying tokens in manager |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |
| `params.sortByDesc?` | `boolean` | Optional boolean to sort tokens in descending order (default: false) |

Returns

`Promise`\<\{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Promise<Array<{flaunch: Address, tokenId: bigint}>> - Array of token objects containing flaunch address and token ID

___

### revenueManagerBalance

‚ñ∏ **revenueManagerBalance**(`params`): `Promise`\<`bigint`\>

Gets the claimable balance of ETH for the recipient from a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for checking the balance |
| `params.recipient` | \`0x$\{string}\` | The address of the recipient to check |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The claimable balance of ETH

___

### revenueManagerProtocolBalance

‚ñ∏ **revenueManagerProtocolBalance**(`revenueManagerAddress`): `Promise`\<`bigint`\>

Gets the claimable balance of ETH for the protocol from a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The claimable balance of ETH

___

### revenueManagerTokensCount

‚ñ∏ **revenueManagerTokensCount**(`revenueManagerAddress`): `Promise`\<`bigint`\>

Gets the total number of tokens managed by a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The total count of tokens

___

### setIPFSResolver

‚ñ∏ **setIPFSResolver**(`resolverFn`): `void`

Sets a custom IPFS resolver function

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `resolverFn` | (`ipfsHash`: `string`) => `string` | Custom function to resolve IPFS URIs |

Returns

`void`

**`Dev`**

this is used to resolve IPFS hash to a gateway URL
eg: input: Qabc, output: https://ipfs.io/ipfs/Qabc

___

### watchPoolCreated

‚ñ∏ **watchPoolCreated**(`params`, `version?`): `Promise`\<\{ `cleanup`: () => `void` ; `pollPoolCreatedNow`: () => `Promise`\<`void`\> = pollEvents }\>

Watches for pool creation events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | `WatchPoolCreatedParams` | `undefined` | Parameters for watching pool creation |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`Promise`\<\{ `cleanup`: () => `void` ; `pollPoolCreatedNow`: () => `Promise`\<`void`\> = pollEvents }\>

Subscription to pool creation events

___

### watchPoolSwap

‚ñ∏ **watchPoolSwap**(`params`, `version?`): `Promise`\<\{ `cleanup`: () => `void` ; `pollPoolSwapNow`: () => `Promise`\<`void`\> = pollEvents }\>

Watches for pool swap events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | `WatchPoolSwapParams` | `undefined` | Parameters for watching pool swaps including optional coin filter |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`Promise`\<\{ `cleanup`: () => `void` ; `pollPoolSwapNow`: () => `Promise`\<`void`\> = pollEvents }\>

Subscription to pool swap events



---

@flaunch/sdk - v0.8.0 / Exports / ReadWriteFlaunchSDK

# Class: ReadWriteFlaunchSDK

Base class for interacting with Flaunch protocol in read-only mode

## Hierarchy

- `ReadFlaunchSDK`

  ‚Ü≥ **`ReadWriteFlaunchSDK`**

## Table of contents

### Constructors

- constructor

### Properties

- TICK\_SPACING
- chainId
- drift
- readAnyPositionManager
- readBidWall
- readBidWallV1\_1
- readFairLaunch
- readFairLaunchV1\_1
- readFeeEscrow
- readFlaunch
- readFlaunchV1\_1
- readFlaunchZap
- readPermit2
- readPoolManager
- readPositionManager
- readPositionManagerV1\_1
- readQuoter
- readReferralEscrow
- readStateView
- readWriteAnyPositionManager
- readWriteFeeEscrow
- readWriteFlaunchZap
- readWritePermit2
- readWritePositionManager
- readWritePositionManagerV1\_1
- readWriteReferralEscrow
- readWriteTreasuryManagerFactory
- resolveIPFS

### Methods

- anyFlaunch
- bidWallPosition
- buyCoin
- claimReferralBalance
- coinBalance
- coinMarketCapInUSD
- coinPriceInETH
- coinPriceInUSD
- creatorRevenue
- currentTick
- deployRevenueManager
- ethRequiredToFlaunch
- fairLaunchCoinOnlyPosition
- fairLaunchDuration
- fairLaunchETHOnlyPosition
- fairLaunchInfo
- flETHIsCurrencyZero
- flaunch
- flaunchIPFS
- flaunchIPFSWithRevenueManager
- flaunchWithRevenueManager
- getBidWall
- getBidWallAddress
- getBuyQuoteExactInput
- getBuyQuoteExactOutput
- getCoinMetadata
- getCoinMetadataFromTokenId
- getCoinMetadataFromTokenIds
- getCoinVersion
- getETHUSDCPrice
- getFairLaunch
- getFairLaunchAddress
- getFlaunchingFee
- getPermit2AllowanceAndNonce
- getPermit2TypedData
- getPositionManager
- getPositionManagerAddress
- getSellQuoteExactInput
- initialSqrtPriceX96
- initialTick
- isFairLaunchActive
- isValidCoin
- pollPoolCreatedNow
- pollPoolSwapNow
- poolId
- positionInfo
- referralBalance
- revenueManagerAllTokensByCreator
- revenueManagerAllTokensInManager
- revenueManagerBalance
- revenueManagerCreatorClaim
- revenueManagerCreatorClaimForTokens
- revenueManagerProtocolBalance
- revenueManagerProtocolClaim
- revenueManagerTokensCount
- sellCoin
- setIPFSResolver
- watchPoolCreated
- watchPoolSwap
- withdrawCreatorRevenue

## Constructors

### constructor

‚Ä¢ **new ReadWriteFlaunchSDK**(`chainId`, `drift?`): `ReadWriteFlaunchSDK`

Parameters

| Name | Type |
| :------ | :------ |
| `chainId` | `number` |
| `drift` | `Drift`\<`ReadWriteAdapter`\> |

Returns

`ReadWriteFlaunchSDK`

Overrides

ReadFlaunchSDK.constructor

## Properties

### TICK\_SPACING

‚Ä¢ `Readonly` **TICK\_SPACING**: ``60``

Inherited from

ReadFlaunchSDK.TICK_SPACING

___

### chainId

‚Ä¢ `Readonly` **chainId**: `number`

Inherited from

ReadFlaunchSDK.chainId

___

### drift

‚Ä¢ **drift**: `Drift`\<`ReadWriteAdapter`\>

Overrides

ReadFlaunchSDK.drift

___

### readAnyPositionManager

‚Ä¢ `Readonly` **readAnyPositionManager**: `ReadAnyPositionManager`

Inherited from

ReadFlaunchSDK.readAnyPositionManager

___

### readBidWall

‚Ä¢ `Readonly` **readBidWall**: `ReadBidWall`

Inherited from

ReadFlaunchSDK.readBidWall

___

### readBidWallV1\_1

‚Ä¢ `Readonly` **readBidWallV1\_1**: `ReadBidWallV1_1`

Inherited from

ReadFlaunchSDK.readBidWallV1_1

___

### readFairLaunch

‚Ä¢ `Readonly` **readFairLaunch**: `ReadFairLaunch`

Inherited from

ReadFlaunchSDK.readFairLaunch

___

### readFairLaunchV1\_1

‚Ä¢ `Readonly` **readFairLaunchV1\_1**: `ReadFairLaunchV1_1`

Inherited from

ReadFlaunchSDK.readFairLaunchV1_1

___

### readFeeEscrow

‚Ä¢ `Readonly` **readFeeEscrow**: `ReadFeeEscrow`

Inherited from

ReadFlaunchSDK.readFeeEscrow

___

### readFlaunch

‚Ä¢ `Readonly` **readFlaunch**: `ReadFlaunch`

Inherited from

ReadFlaunchSDK.readFlaunch

___

### readFlaunchV1\_1

‚Ä¢ `Readonly` **readFlaunchV1\_1**: `ReadFlaunchV1_1`

Inherited from

ReadFlaunchSDK.readFlaunchV1_1

___

### readFlaunchZap

‚Ä¢ `Readonly` **readFlaunchZap**: `ReadFlaunchZap`

Inherited from

ReadFlaunchSDK.readFlaunchZap

___

### readPermit2

‚Ä¢ `Readonly` **readPermit2**: `ReadPermit2`

Inherited from

ReadFlaunchSDK.readPermit2

___

### readPoolManager

‚Ä¢ `Readonly` **readPoolManager**: `ReadPoolManager`

Inherited from

ReadFlaunchSDK.readPoolManager

___

### readPositionManager

‚Ä¢ `Readonly` **readPositionManager**: `ReadFlaunchPositionManager`

Inherited from

ReadFlaunchSDK.readPositionManager

___

### readPositionManagerV1\_1

‚Ä¢ `Readonly` **readPositionManagerV1\_1**: `ReadFlaunchPositionManagerV1_1`

Inherited from

ReadFlaunchSDK.readPositionManagerV1_1

___

### readQuoter

‚Ä¢ `Readonly` **readQuoter**: `ReadQuoter`

Inherited from

ReadFlaunchSDK.readQuoter

___

### readReferralEscrow

‚Ä¢ `Readonly` **readReferralEscrow**: `ReadReferralEscrow`

Inherited from

ReadFlaunchSDK.readReferralEscrow

___

### readStateView

‚Ä¢ `Readonly` **readStateView**: `ReadStateView`

Inherited from

ReadFlaunchSDK.readStateView

___

### readWriteAnyPositionManager

‚Ä¢ `Readonly` **readWriteAnyPositionManager**: `ReadWriteAnyPositionManager`

___

### readWriteFeeEscrow

‚Ä¢ `Readonly` **readWriteFeeEscrow**: `ReadWriteFeeEscrow`

___

### readWriteFlaunchZap

‚Ä¢ `Readonly` **readWriteFlaunchZap**: `ReadWriteFlaunchZap`

___

### readWritePermit2

‚Ä¢ `Readonly` **readWritePermit2**: `ReadWritePermit2`

___

### readWritePositionManager

‚Ä¢ `Readonly` **readWritePositionManager**: `ReadWriteFlaunchPositionManager`

___

### readWritePositionManagerV1\_1

‚Ä¢ `Readonly` **readWritePositionManagerV1\_1**: `ReadWriteFlaunchPositionManagerV1_1`

___

### readWriteReferralEscrow

‚Ä¢ `Readonly` **readWriteReferralEscrow**: `ReadWriteReferralEscrow`

___

### readWriteTreasuryManagerFactory

‚Ä¢ `Readonly` **readWriteTreasuryManagerFactory**: `ReadWriteTreasuryManagerFactory`

___

### resolveIPFS

‚Ä¢ **resolveIPFS**: (`value`: `string`) => `string`

Type declaration

‚ñ∏ (`value`): `string`

#Parameters

| Name | Type |
| :------ | :------ |
| `value` | `string` |

#Returns

`string`

Inherited from

ReadFlaunchSDK.resolveIPFS

## Methods

### anyFlaunch

‚ñ∏ **anyFlaunch**(`params`): `Promise`\<\`0x$\{string}\`\>

Creates a new Flaunch with AnyPositionManager for external coins

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `AnyFlaunchParams` | Parameters for creating the Flaunch with AnyPositionManager |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### bidWallPosition

‚ñ∏ **bidWallPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `pendingEth`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the bid wall position for a coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `pendingEth`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, pendingEth: bigint, tickLower: number, tickUpper: number}> - Bid wall position details

Inherited from

ReadFlaunchSDK.bidWallPosition

___

### buyCoin

‚ñ∏ **buyCoin**(`params`, `version?`): `Promise`\<\`0x$\{string}\`\>

Buys a coin with ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `BuyCoinParams` | Parameters for buying the coin including amount, slippage, and referrer |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will determine automatically |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response for the buy operation

___

### claimReferralBalance

‚ñ∏ **claimReferralBalance**(`coins`, `recipient`): `Promise`\<\`0x$\{string}\`\>

Claims the referral balance for a given recipient

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coins` | \`0x$\{string}\`[] | The addresses of the coins to claim |
| `recipient` | \`0x$\{string}\` | The address of the recipient to claim the balance for |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### coinBalance

‚ñ∏ **coinBalance**(`coinAddress`): `Promise`\<`bigint`\>

Gets the balance of a specific coin for the connected wallet

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The balance of the coin

___

### coinMarketCapInUSD

‚ñ∏ **coinMarketCapInUSD**(`¬´destructured¬ª`): `Promise`\<`string`\>

Parameters

| Name | Type |
| :------ | :------ |
| `¬´destructured¬ª` | `Object` |
| ‚Ä∫¬†`coinAddress` | \`0x$\{string}\` |
| ‚Ä∫¬†`drift?` | `Drift` |
| ‚Ä∫¬†`version?` | `FlaunchVersion` |

Returns

`Promise`\<`string`\>

Inherited from

ReadFlaunchSDK.coinMarketCapInUSD

___

### coinPriceInETH

‚ñ∏ **coinPriceInETH**(`coinAddress`, `version?`): `Promise`\<`string`\>

Calculates the coin price in ETH based on the current tick

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`string`\>

Promise<string> - The price of the coin in ETH with 18 decimals precision

Inherited from

ReadFlaunchSDK.coinPriceInETH

___

### coinPriceInUSD

‚ñ∏ **coinPriceInUSD**(`¬´destructured¬ª`): `Promise`\<`string`\>

Calculates the coin price in USD based on the current ETH/USDC price

Parameters

| Name | Type |
| :------ | :------ |
| `¬´destructured¬ª` | `Object` |
| ‚Ä∫¬†`coinAddress` | \`0x$\{string}\` |
| ‚Ä∫¬†`drift?` | `Drift` |
| ‚Ä∫¬†`version?` | `FlaunchVersion` |

Returns

`Promise`\<`string`\>

Promise<string> - The price of the coin in USD with 2 decimal precision

Inherited from

ReadFlaunchSDK.coinPriceInUSD

___

### creatorRevenue

‚ñ∏ **creatorRevenue**(`creator`, `isV1?`): `Promise`\<`bigint`\>

Gets the ETH balance for the creator to claim

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `creator` | \`0x$\{string}\` | The address of the creator to check |
| `isV1?` | `boolean` | Optional boolean to check the balance for V1. V1.1 & AnyPositionManager use the same FeeEscrow contract |

Returns

`Promise`\<`bigint`\>

The balance of the creator

Inherited from

ReadFlaunchSDK.creatorRevenue

___

### currentTick

‚ñ∏ **currentTick**(`coinAddress`, `version?`): `Promise`\<`number`\>

Gets the current tick for a given coin's pool

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number`\>

Promise<number> - The current tick of the pool

Inherited from

ReadFlaunchSDK.currentTick

___

### deployRevenueManager

‚ñ∏ **deployRevenueManager**(`params`): `Promise`\<\`0x$\{string}\`\>

Deploys a new revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for deploying the revenue manager |
| `params.protocolFeePercent` | `number` | The percentage of the protocol fee |
| `params.protocolRecipient` | \`0x$\{string}\` | The address of the protocol recipient |

Returns

`Promise`\<\`0x$\{string}\`\>

Address of the deployed revenue manager

___

### ethRequiredToFlaunch

‚ñ∏ **ethRequiredToFlaunch**(`params`): `Promise`\<`bigint`\>

Calculates the ETH required to flaunch a token, takes into account the ETH for premine and the flaunching fee

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | - |
| `params.initialMarketCapUSD` | `number` | The initial market cap in USD |
| `params.premineAmount` | `bigint` | The amount of coins to be premined |
| `params.slippagePercent?` | `number` | The slippage percent |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The ETH required to flaunch

Inherited from

ReadFlaunchSDK.ethRequiredToFlaunch

___

### fairLaunchCoinOnlyPosition

‚ñ∏ **fairLaunchCoinOnlyPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the coin-only position in a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, tickLower: number, tickUpper: number}> - Position details

Inherited from

ReadFlaunchSDK.fairLaunchCoinOnlyPosition

___

### fairLaunchDuration

‚ñ∏ **fairLaunchDuration**(`coinAddress`, `version?`): `Promise`\<`number` \| `bigint`\>

Gets the duration of a fair launch for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number` \| `bigint`\>

Promise<number> - The duration in seconds (30 minutes for V1, variable for V1.1)

Inherited from

ReadFlaunchSDK.fairLaunchDuration

___

### fairLaunchETHOnlyPosition

‚ñ∏ **fairLaunchETHOnlyPosition**(`coinAddress`, `version?`): `Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Gets information about the ETH-only position in a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `coinAmount`: `bigint` ; `flETHAmount`: `bigint` ; `tickLower`: `number` ; `tickUpper`: `number`  }\>

Promise<{flETHAmount: bigint, coinAmount: bigint, tickLower: number, tickUpper: number}> - Position details

Inherited from

ReadFlaunchSDK.fairLaunchETHOnlyPosition

___

### fairLaunchInfo

‚ñ∏ **fairLaunchInfo**(`coinAddress`, `version?`): `Promise`\<\{ `closed`: `boolean` ; `endsAt`: `bigint` ; `initialTick`: `number` ; `revenue`: `bigint` ; `startsAt`: `bigint` ; `supply`: `bigint`  }\>

Gets information about a fair launch for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<\{ `closed`: `boolean` ; `endsAt`: `bigint` ; `initialTick`: `number` ; `revenue`: `bigint` ; `startsAt`: `bigint` ; `supply`: `bigint`  }\>

Fair launch information from the appropriate contract version

Inherited from

ReadFlaunchSDK.fairLaunchInfo

___

### flETHIsCurrencyZero

‚ñ∏ **flETHIsCurrencyZero**(`coinAddress`): `boolean`

Determines if flETH is currency0 in the pool

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`boolean`

boolean - True if flETH is currency0, false otherwise

Inherited from

ReadFlaunchSDK.flETHIsCurrencyZero

___

### flaunch

‚ñ∏ **flaunch**(`params`): `Promise`\<\`0x$\{string}\`\>

Creates a new Flaunch on the specified version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `FlaunchParams` | Parameters for creating the Flaunch |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### flaunchIPFS

‚ñ∏ **flaunchIPFS**(`params`): `Promise`\<\`0x$\{string}\`\>

Creates a new Flaunch with IPFS metadata and optional version specification

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `FlaunchIPFSParams` | Parameters for creating the Flaunch with IPFS data |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### flaunchIPFSWithRevenueManager

‚ñ∏ **flaunchIPFSWithRevenueManager**(`params`): `Promise`\<\`0x$\{string}\`\>

Creates a new Flaunch with revenue manager configuration and IPFS metadata

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `FlaunchWithRevenueManagerIPFSParams` | Parameters for creating the Flaunch with revenue manager and IPFS data |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

**`Throws`**

Error if FlaunchZap is not deployed on the current chain

___

### flaunchWithRevenueManager

‚ñ∏ **flaunchWithRevenueManager**(`params`): `Promise`\<\`0x$\{string}\`\>

Creates a new Flaunch with revenue manager configuration

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `FlaunchWithRevenueManagerParams` | Parameters for creating the Flaunch with revenue manager |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

**`Throws`**

Error if FlaunchZap is not deployed on the current chain

___

### getBidWall

‚ñ∏ **getBidWall**(`version`): `ReadBidWall` \| `ReadBidWallV1_1`

Gets the bid wall address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the bid wall address for |

Returns

`ReadBidWall` \| `ReadBidWallV1_1`

Inherited from

ReadFlaunchSDK.getBidWall

___

### getBidWallAddress

‚ñ∏ **getBidWallAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

Inherited from

ReadFlaunchSDK.getBidWallAddress

___

### getBuyQuoteExactInput

‚ñ∏ **getBuyQuoteExactInput**(`coinAddress`, `amountIn`, `version?`): `Promise`\<`bigint`\>

Gets a quote for buying tokens with an exact amount of ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to buy |
| `amountIn` | `bigint` | - |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The expected amount of tokens to receive

Inherited from

ReadFlaunchSDK.getBuyQuoteExactInput

___

### getBuyQuoteExactOutput

‚ñ∏ **getBuyQuoteExactOutput**(`coinAddress`, `amountOut`, `version?`): `Promise`\<`bigint`\>

Gets a quote for buying an exact amount of tokens with ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to buy |
| `amountOut` | `bigint` | - |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The required amount of ETH to spend

Inherited from

ReadFlaunchSDK.getBuyQuoteExactOutput

___

### getCoinMetadata

‚ñ∏ **getCoinMetadata**(`coinAddress`): `Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Retrieves metadata for a given Flaunch coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Promise<CoinMetadata & { symbol: string }> - The coin's metadata including name, symbol, description, and social links

Inherited from

ReadFlaunchSDK.getCoinMetadata

___

### getCoinMetadataFromTokenId

‚ñ∏ **getCoinMetadataFromTokenId**(`flaunch`, `tokenId`): `Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

Retrieves metadata for a given Flaunch coin using its token ID & Flaunch contract address

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `flaunch` | \`0x$\{string}\` | The address of the Flaunch contract |
| `tokenId` | `bigint` | The token ID of the coin |

Returns

`Promise`\<`CoinMetadata` & \{ `symbol`: `string`  }\>

The coin's metadata including name, symbol, description, and social links

Inherited from

ReadFlaunchSDK.getCoinMetadataFromTokenId

___

### getCoinMetadataFromTokenIds

‚ñ∏ **getCoinMetadataFromTokenIds**(`params`, `batchSize?`, `batchDelay?`): `Promise`\<\{ `coinAddress`: \`0x$\{string}\` ; `collaborators`: `any` ; `description`: `any` ; `discordUrl`: `any` ; `external_link`: `any` ; `image`: `string` ; `name`: `string` ; `symbol`: `string` ; `telegramUrl`: `any` ; `twitterUrl`: `any`  }[]\>

Retrieves metadata for multiple Flaunch coins using their token IDs & Flaunch contract addresses

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[] | `undefined` | An array of objects containing flaunch contract address and token ID |
| `batchSize` | `number` | `9` | Optional, the number of ipfs requests to process in each batch |
| `batchDelay` | `number` | `500` | Optional, the delay in milliseconds between batches |

Returns

`Promise`\<\{ `coinAddress`: \`0x$\{string}\` ; `collaborators`: `any` ; `description`: `any` ; `discordUrl`: `any` ; `external_link`: `any` ; `image`: `string` ; `name`: `string` ; `symbol`: `string` ; `telegramUrl`: `any` ; `twitterUrl`: `any`  }[]\>

An array of objects containing coin address, name, symbol, description, and social links

Inherited from

ReadFlaunchSDK.getCoinMetadataFromTokenIds

___

### getCoinVersion

‚ñ∏ **getCoinVersion**(`coinAddress`): `Promise`\<`FlaunchVersion`\>

Determines the version of a Flaunch coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<`FlaunchVersion`\>

Promise<FlaunchVersion> - The version of the coin

Inherited from

ReadFlaunchSDK.getCoinVersion

___

### getETHUSDCPrice

‚ñ∏ **getETHUSDCPrice**(`drift?`): `Promise`\<`number`\>

Gets the current ETH/USDC price

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `drift?` | `Drift` | Optional drift instance to get price from Base Mainnet |

Returns

`Promise`\<`number`\>

Promise<number> - The current ETH/USDC price

Inherited from

ReadFlaunchSDK.getETHUSDCPrice

___

### getFairLaunch

‚ñ∏ **getFairLaunch**(`version`): `ReadFairLaunch` \| `ReadFairLaunchV1_1`

Gets the fair launch address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the fair launch address for |

Returns

`ReadFairLaunch` \| `ReadFairLaunchV1_1`

Inherited from

ReadFlaunchSDK.getFairLaunch

___

### getFairLaunchAddress

‚ñ∏ **getFairLaunchAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

Inherited from

ReadFlaunchSDK.getFairLaunchAddress

___

### getFlaunchingFee

‚ñ∏ **getFlaunchingFee**(`params`): `Promise`\<`bigint`\>

Gets the flaunching fee for a given initial price and slippage percent

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | - |
| `params.initialMarketCapUSD` | `number` | The initial market cap in USD |
| `params.sender` | \`0x$\{string}\` | The address of the sender |
| `params.slippagePercent?` | `number` | The slippage percent |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The flaunching fee

Inherited from

ReadFlaunchSDK.getFlaunchingFee

___

### getPermit2AllowanceAndNonce

‚ñ∏ **getPermit2AllowanceAndNonce**(`coinAddress`): `Promise`\<\{ `allowance`: `bigint` = amount; `nonce`: `number`  }\>

Gets the current Permit2 allowance and nonce for a coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<\{ `allowance`: `bigint` = amount; `nonce`: `number`  }\>

Promise<{allowance: bigint, nonce: bigint}> - Current allowance and nonce

___

### getPermit2TypedData

‚ñ∏ **getPermit2TypedData**(`coinAddress`, `deadline?`): `Promise`\<\{ `permitSingle`: `PermitSingle` ; `typedData`: \{ `domain`: \{ `chainId`: `number` ; `name`: `string` ; `verifyingContract`: \`0x$\{string}\`  } ; `message`: `PermitSingle` ; `primaryType`: `string` ; `types`: \{ `PermitDetails`: \{ `name`: `string` = "token"; `type`: `string` = "address" }[] = PERMIT\_DETAILS; `PermitSingle`: \{ `name`: `string` = "details"; `type`: `string` = "PermitDetails" }[]  }  }  }\>

Gets the typed data for a Permit2 signature

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to permit |
| `deadline?` | `bigint` | Optional deadline for the permit (defaults to 10 years) |

Returns

`Promise`\<\{ `permitSingle`: `PermitSingle` ; `typedData`: \{ `domain`: \{ `chainId`: `number` ; `name`: `string` ; `verifyingContract`: \`0x$\{string}\`  } ; `message`: `PermitSingle` ; `primaryType`: `string` ; `types`: \{ `PermitDetails`: \{ `name`: `string` = "token"; `type`: `string` = "address" }[] = PERMIT\_DETAILS; `PermitSingle`: \{ `name`: `string` = "details"; `type`: `string` = "PermitDetails" }[]  }  }  }\>

The typed data object for signing

___

### getPositionManager

‚ñ∏ **getPositionManager**(`version`): `ReadFlaunchPositionManager` \| `ReadFlaunchPositionManagerV1_1` \| `ReadAnyPositionManager`

Gets the position manager address for a given version

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `version` | `FlaunchVersion` | The version to get the position manager address for |

Returns

`ReadFlaunchPositionManager` \| `ReadFlaunchPositionManagerV1_1` \| `ReadAnyPositionManager`

Inherited from

ReadFlaunchSDK.getPositionManager

___

### getPositionManagerAddress

‚ñ∏ **getPositionManagerAddress**(`version`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `version` | `FlaunchVersion` |

Returns

\`0x$\{string}\`

Inherited from

ReadFlaunchSDK.getPositionManagerAddress

___

### getSellQuoteExactInput

‚ñ∏ **getSellQuoteExactInput**(`coinAddress`, `amountIn`, `version?`): `Promise`\<`bigint`\>

Gets a quote for selling an exact amount of tokens for ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the token to sell |
| `amountIn` | `bigint` | The exact amount of tokens to sell |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The expected amount of ETH to receive

Inherited from

ReadFlaunchSDK.getSellQuoteExactInput

___

### initialSqrtPriceX96

‚ñ∏ **initialSqrtPriceX96**(`params`): `Promise`\<`bigint`\>

Parameters

| Name | Type |
| :------ | :------ |
| `params` | `Object` |
| `params.coinAddress` | \`0x$\{string}\` |
| `params.initialMarketCapUSD` | `number` |

Returns

`Promise`\<`bigint`\>

Inherited from

ReadFlaunchSDK.initialSqrtPriceX96

___

### initialTick

‚ñ∏ **initialTick**(`coinAddress`, `version?`): `Promise`\<`number`\>

Gets the initial tick for a fair launch

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`number`\>

Promise<number> - The initial tick value

Inherited from

ReadFlaunchSDK.initialTick

___

### isFairLaunchActive

‚ñ∏ **isFairLaunchActive**(`coinAddress`, `version?`): `Promise`\<`boolean`\>

Checks if a fair launch is currently active for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will be determined automatically |

Returns

`Promise`\<`boolean`\>

Promise<boolean> - True if fair launch is active, false otherwise

Inherited from

ReadFlaunchSDK.isFairLaunchActive

___

### isValidCoin

‚ñ∏ **isValidCoin**(`coinAddress`): `Promise`\<`boolean`\>

Checks if a given coin address is a valid Flaunch coin (supports all versions)

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin to check |

Returns

`Promise`\<`boolean`\>

Promise<boolean> - True if the coin is valid, false otherwise

Inherited from

ReadFlaunchSDK.isValidCoin

___

### pollPoolCreatedNow

‚ñ∏ **pollPoolCreatedNow**(`version?`): `undefined` \| `Promise`\<`void`\>

Polls for current pool creation events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`undefined` \| `Promise`\<`void`\>

Current pool creation events or undefined if polling is not available

Inherited from

ReadFlaunchSDK.pollPoolCreatedNow

___

### pollPoolSwapNow

‚ñ∏ **pollPoolSwapNow**(`version?`): `undefined` \| `Promise`\<`void`\>

Polls for current pool swap events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`undefined` \| `Promise`\<`void`\>

Current pool swap events or undefined if polling is not available

Inherited from

ReadFlaunchSDK.pollPoolSwapNow

___

### poolId

‚ñ∏ **poolId**(`coinAddress`, `version?`): `Promise`\<\`0x$\{string}\`\>

Gets the pool ID for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |
| `version?` | `FlaunchVersion` | Optional specific version to use |

Returns

`Promise`\<\`0x$\{string}\`\>

Promise<string> - The pool ID

Inherited from

ReadFlaunchSDK.poolId

___

### positionInfo

‚ñ∏ **positionInfo**(`params`): `Promise`\<\{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  } \| \{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  }\>

Gets information about a liquidity position

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `PositionInfoParams` | Parameters for querying position info |

Returns

`Promise`\<\{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  } \| \{ `feeGrowthInside0LastX128`: `bigint` ; `feeGrowthInside1LastX128`: `bigint` ; `liquidity`: `bigint`  }\>

Position information from the state view contract

Inherited from

ReadFlaunchSDK.positionInfo

___

### referralBalance

‚ñ∏ **referralBalance**(`recipient`, `coinAddress`): `Promise`\<`bigint`\>

Gets the balance of a recipient for a given coin

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `recipient` | \`0x$\{string}\` | The address of the recipient to check |
| `coinAddress` | \`0x$\{string}\` | The address of the coin |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The balance of the recipient

Inherited from

ReadFlaunchSDK.referralBalance

___

### revenueManagerAllTokensByCreator

‚ñ∏ **revenueManagerAllTokensByCreator**(`params`): `Promise`\<readonly \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Gets all tokens created by a specific creator address

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for querying tokens by creator |
| `params.creator` | \`0x$\{string}\` | The address of the creator to query tokens for |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |
| `params.sortByDesc?` | `boolean` | Whether to sort the tokens by descending order |

Returns

`Promise`\<readonly \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Promise<Array<{flaunch: Address, tokenId: bigint}>> - Array of token objects containing flaunch address and token ID

Inherited from

ReadFlaunchSDK.revenueManagerAllTokensByCreator

___

### revenueManagerAllTokensInManager

‚ñ∏ **revenueManagerAllTokensInManager**(`params`): `Promise`\<\{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Gets all tokens currently managed by a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for querying tokens in manager |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |
| `params.sortByDesc?` | `boolean` | Optional boolean to sort tokens in descending order (default: false) |

Returns

`Promise`\<\{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[]\>

Promise<Array<{flaunch: Address, tokenId: bigint}>> - Array of token objects containing flaunch address and token ID

Inherited from

ReadFlaunchSDK.revenueManagerAllTokensInManager

___

### revenueManagerBalance

‚ñ∏ **revenueManagerBalance**(`params`): `Promise`\<`bigint`\>

Gets the claimable balance of ETH for the recipient from a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for checking the balance |
| `params.recipient` | \`0x$\{string}\` | The address of the recipient to check |
| `params.revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The claimable balance of ETH

Inherited from

ReadFlaunchSDK.revenueManagerBalance

___

### revenueManagerCreatorClaim

‚ñ∏ **revenueManagerCreatorClaim**(`params`): `Promise`\<\`0x$\{string}\`\>

Claims the total creator's share of the revenue from a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for claiming the creator's share of the revenue |
| `params.revenueManagerAddress` | \`0x$\{string}\` | - |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### revenueManagerCreatorClaimForTokens

‚ñ∏ **revenueManagerCreatorClaimForTokens**(`params`): `Promise`\<\`0x$\{string}\`\>

Claims the creator's share of the revenue from specific flaunch tokens

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for claiming the creator's share of the revenue |
| `params.flaunchTokens` | \{ `flaunch`: \`0x$\{string}\` ; `tokenId`: `bigint`  }[] | - |
| `params.revenueManagerAddress` | \`0x$\{string}\` | - |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### revenueManagerProtocolBalance

‚ñ∏ **revenueManagerProtocolBalance**(`revenueManagerAddress`): `Promise`\<`bigint`\>

Gets the claimable balance of ETH for the protocol from a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The claimable balance of ETH

Inherited from

ReadFlaunchSDK.revenueManagerProtocolBalance

___

### revenueManagerProtocolClaim

‚ñ∏ **revenueManagerProtocolClaim**(`params`): `Promise`\<\`0x$\{string}\`\>

Claims the protocol's share of the revenue

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for claiming the protocol's share of the revenue |
| `params.revenueManagerAddress` | \`0x$\{string}\` | - |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response

___

### revenueManagerTokensCount

‚ñ∏ **revenueManagerTokensCount**(`revenueManagerAddress`): `Promise`\<`bigint`\>

Gets the total number of tokens managed by a revenue manager

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `revenueManagerAddress` | \`0x$\{string}\` | The address of the revenue manager |

Returns

`Promise`\<`bigint`\>

Promise<bigint> - The total count of tokens

Inherited from

ReadFlaunchSDK.revenueManagerTokensCount

___

### sellCoin

‚ñ∏ **sellCoin**(`params`, `version?`): `Promise`\<\`0x$\{string}\`\>

Sells a coin for ETH

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `SellCoinParams` | Parameters for selling the coin including amount, slippage, permit data, and referrer |
| `version?` | `FlaunchVersion` | Optional specific version to use. If not provided, will determine automatically |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response for the sell operation

___

### setIPFSResolver

‚ñ∏ **setIPFSResolver**(`resolverFn`): `void`

Sets a custom IPFS resolver function

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `resolverFn` | (`ipfsHash`: `string`) => `string` | Custom function to resolve IPFS URIs |

Returns

`void`

**`Dev`**

this is used to resolve IPFS hash to a gateway URL
eg: input: Qabc, output: https://ipfs.io/ipfs/Qabc

Inherited from

ReadFlaunchSDK.setIPFSResolver

___

### watchPoolCreated

‚ñ∏ **watchPoolCreated**(`params`, `version?`): `Promise`\<\{ `cleanup`: () => `void` ; `pollPoolCreatedNow`: () => `Promise`\<`void`\> = pollEvents }\>

Watches for pool creation events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | `WatchPoolCreatedParams` | `undefined` | Parameters for watching pool creation |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`Promise`\<\{ `cleanup`: () => `void` ; `pollPoolCreatedNow`: () => `Promise`\<`void`\> = pollEvents }\>

Subscription to pool creation events

Inherited from

ReadFlaunchSDK.watchPoolCreated

___

### watchPoolSwap

‚ñ∏ **watchPoolSwap**(`params`, `version?`): `Promise`\<\{ `cleanup`: () => `void` ; `pollPoolSwapNow`: () => `Promise`\<`void`\> = pollEvents }\>

Watches for pool swap events

Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `params` | `WatchPoolSwapParams` | `undefined` | Parameters for watching pool swaps including optional coin filter |
| `version` | `FlaunchVersion` | `FlaunchVersion.V1_1` | Version of Flaunch to use (defaults to V1_1) |

Returns

`Promise`\<\{ `cleanup`: () => `void` ; `pollPoolSwapNow`: () => `Promise`\<`void`\> = pollEvents }\>

Subscription to pool swap events

Inherited from

ReadFlaunchSDK.watchPoolSwap

___

### withdrawCreatorRevenue

‚ñ∏ **withdrawCreatorRevenue**(`params`): `Promise`\<\`0x$\{string}\`\>

Withdraws the creator's share of the revenue

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Parameters for withdrawing the creator's share of the revenue |
| `params.isV1?` | `boolean` | Optional boolean to withdraw from V1. V1.1 & AnyPositionManager use the same FeeEscrow contract |
| `params.recipient?` | \`0x$\{string}\` | The address to withdraw the revenue to. Defaults to the connected wallet |

Returns

`Promise`\<\`0x$\{string}\`\>

Transaction response



---

@flaunch/sdk - v0.8.0 / Exports / FlaunchVersion

# Enumeration: FlaunchVersion

Enumeration of Flaunch contract versions

## Table of contents

### Enumeration Members

- ANY
- V1
- V1\_1
- V1\_1\_1

## Enumeration Members

### ANY

‚Ä¢ **ANY** = ``"ANY"``

___

### V1

‚Ä¢ **V1** = ``"V1"``

___

### V1\_1

‚Ä¢ **V1\_1** = ``"V1_1"``

___

### V1\_1\_1

‚Ä¢ **V1\_1\_1** = ``"V1_1_1"``



---

@flaunch/sdk - v0.8.0 / Exports / Addresses

# Interface: Addresses

## Indexable

‚ñ™ [chainId: `number`]: `Address`


---

@flaunch/sdk - v0.8.0 / Exports / CoinMetadata

# Interface: CoinMetadata

## Table of contents

### Properties

- collaborators
- description
- discordUrl
- external\_link
- image
- name
- telegramUrl
- twitterUrl

## Properties

### collaborators

‚Ä¢ **collaborators**: `string`[]

___

### description

‚Ä¢ **description**: `string`

___

### discordUrl

‚Ä¢ **discordUrl**: `string`

___

### external\_link

‚Ä¢ **external\_link**: `string`

___

### image

‚Ä¢ **image**: `string`

___

### name

‚Ä¢ **name**: `string`

___

### telegramUrl

‚Ä¢ **telegramUrl**: `string`

___

### twitterUrl

‚Ä¢ **twitterUrl**: `string`



---

@flaunch/sdk - v0.8.0 / Exports / IPFSParams

# Interface: IPFSParams

## Table of contents

### Properties

- metadata
- pinataConfig

## Properties

### metadata

‚Ä¢ **metadata**: `Object`

Type declaration

| Name | Type |
| :------ | :------ |
| `base64Image` | `string` |
| `description` | `string` |
| `discordUrl?` | `string` |
| `telegramUrl?` | `string` |
| `twitterUrl?` | `string` |
| `websiteUrl?` | `string` |

___

### pinataConfig

‚Ä¢ **pinataConfig**: `PinataConfig`



---

@flaunch/sdk - v0.8.0 / Exports / PinataConfig

# Interface: PinataConfig

## Table of contents

### Properties

- jwt

## Properties

### jwt

‚Ä¢ **jwt**: `string`



---

@flaunch/sdk - v0.8.0 / Exports / PoolKey

# Interface: PoolKey

## Table of contents

### Properties

- currency0
- currency1
- fee
- hooks
- tickSpacing

## Properties

### currency0

‚Ä¢ **currency0**: \`0x$\{string}\`

___

### currency1

‚Ä¢ **currency1**: \`0x$\{string}\`

___

### fee

‚Ä¢ **fee**: `number`

___

### hooks

‚Ä¢ **hooks**: \`0x$\{string}\`

___

### tickSpacing

‚Ä¢ **tickSpacing**: `number`



---

@flaunch/sdk - v0.8.0 / Exports

# @flaunch/sdk - v0.8.0

## Table of contents

### Enumerations

- FlaunchVersion

### Classes

- ReadFlaunchSDK
- ReadWriteFlaunchSDK

### Interfaces

- Addresses
- CoinMetadata
- IPFSParams
- PinataConfig
- PoolKey

### Type Aliases

- BuySwapLog
- CreateFlaunchParams
- PoolCreatedLogs
- SellSwapLog

### Variables

- AnyPositionManagerAddress
- BidWallAddress
- BidWallV1\_1Address
- FLETHAddress
- FLETHHooksAddress
- FairLaunchAddress
- FairLaunchV1\_1Address
- FastFlaunchZapAddress
- FeeEscrowAddress
- FlaunchAddress
- FlaunchPositionManagerAddress
- FlaunchPositionManagerV1\_1Address
- FlaunchSDK
- FlaunchV1\_1Address
- FlaunchZapAddress
- Permit2Address
- PoolManagerAddress
- QuoterAddress
- ReferralEscrowAddress
- RevenueManagerAddress
- StateViewAddress
- TICK\_SPACING
- TickFinder
- TreasuryManagerFactoryAddress
- USDCETHPoolKeys
- UniversalRouterAddress
- chainIdToChain

### Functions

- bytes32ToUint256
- calculateUnderlyingTokenBalances
- createDrift
- createFlaunch
- generateTokenUri
- getPoolId
- getSqrtPriceX96FromTick
- getValidTick
- orderPoolKey
- resolveIPFS
- uint256ToBytes32
- uploadFileToIPFS
- uploadImageToIPFS
- uploadJsonToIPFS

## Type Aliases

### BuySwapLog

∆¨ **BuySwapLog**: `BaseSwapLog` & \{ `delta`: \{ `coinsBought`: `bigint` ; `fees`: \{ `amount`: `bigint` ; `isInFLETH`: `boolean`  } ; `flETHSold`: `bigint`  } ; `type`: ``"BUY"``  }

___

### CreateFlaunchParams

∆¨ **CreateFlaunchParams**: `Object`

Type declaration

| Name | Type |
| :------ | :------ |
| `publicClient` | `PublicClient` |
| `walletClient?` | `WalletClient` |

___

### PoolCreatedLogs

∆¨ **PoolCreatedLogs**: `PoolCreatedLog`[]

___

### SellSwapLog

∆¨ **SellSwapLog**: `BaseSwapLog` & \{ `delta`: \{ `coinsSold`: `bigint` ; `fees`: \{ `amount`: `bigint` ; `isInFLETH`: `boolean`  } ; `flETHBought`: `bigint`  } ; `type`: ``"SELL"``  }

## Variables

### AnyPositionManagerAddress

‚Ä¢ `Const` **AnyPositionManagerAddress**: `Addresses`

___

### BidWallAddress

‚Ä¢ `Const` **BidWallAddress**: `Addresses`

___

### BidWallV1\_1Address

‚Ä¢ `Const` **BidWallV1\_1Address**: `Addresses`

___

### FLETHAddress

‚Ä¢ `Const` **FLETHAddress**: `Addresses`

___

### FLETHHooksAddress

‚Ä¢ `Const` **FLETHHooksAddress**: `Addresses`

___

### FairLaunchAddress

‚Ä¢ `Const` **FairLaunchAddress**: `Addresses`

___

### FairLaunchV1\_1Address

‚Ä¢ `Const` **FairLaunchV1\_1Address**: `Addresses`

___

### FastFlaunchZapAddress

‚Ä¢ `Const` **FastFlaunchZapAddress**: `Addresses`

___

### FeeEscrowAddress

‚Ä¢ `Const` **FeeEscrowAddress**: `Addresses`

___

### FlaunchAddress

‚Ä¢ `Const` **FlaunchAddress**: `Addresses`

___

### FlaunchPositionManagerAddress

‚Ä¢ `Const` **FlaunchPositionManagerAddress**: `Addresses`

___

### FlaunchPositionManagerV1\_1Address

‚Ä¢ `Const` **FlaunchPositionManagerV1\_1Address**: `Addresses`

___

### FlaunchSDK

‚Ä¢ `Const` **FlaunchSDK**: `Object`

Type declaration

| Name | Type |
| :------ | :------ |
| `ReadFlaunchSDK` | typeof `ReadFlaunchSDK` |
| `ReadWriteFlaunchSDK` | typeof `ReadWriteFlaunchSDK` |

___

### FlaunchV1\_1Address

‚Ä¢ `Const` **FlaunchV1\_1Address**: `Addresses`

___

### FlaunchZapAddress

‚Ä¢ `Const` **FlaunchZapAddress**: `Addresses`

___

### Permit2Address

‚Ä¢ `Const` **Permit2Address**: `Addresses`

___

### PoolManagerAddress

‚Ä¢ `Const` **PoolManagerAddress**: `Addresses`

___

### QuoterAddress

‚Ä¢ `Const` **QuoterAddress**: `Addresses`

___

### ReferralEscrowAddress

‚Ä¢ `Const` **ReferralEscrowAddress**: `Addresses`

___

### RevenueManagerAddress

‚Ä¢ `Const` **RevenueManagerAddress**: `Addresses`

___

### StateViewAddress

‚Ä¢ `Const` **StateViewAddress**: `Addresses`

___

### TICK\_SPACING

‚Ä¢ `Const` **TICK\_SPACING**: ``60``

___

### TickFinder

‚Ä¢ `Const` **TickFinder**: `Object`

Type declaration

| Name | Type |
| :------ | :------ |
| `MAX_TICK` | `number` |
| `MIN_TICK` | `number` |

___

### TreasuryManagerFactoryAddress

‚Ä¢ `Const` **TreasuryManagerFactoryAddress**: `Addresses`

___

### USDCETHPoolKeys

‚Ä¢ `Const` **USDCETHPoolKeys**: `Object`

Index signature

‚ñ™ [chainId: `number`]: `PoolKey`

___

### UniversalRouterAddress

‚Ä¢ `Const` **UniversalRouterAddress**: `Addresses`

___

### chainIdToChain

‚Ä¢ `Const` **chainIdToChain**: `Object`

Index signature

‚ñ™ [key: `number`]: `Chain`

## Functions

### bytes32ToUint256

‚ñ∏ **bytes32ToUint256**(`value`): `bigint`

Parameters

| Name | Type |
| :------ | :------ |
| `value` | \`0x$\{string}\` |

Returns

`bigint`

___

### calculateUnderlyingTokenBalances

‚ñ∏ **calculateUnderlyingTokenBalances**(`liquidity`, `tickLower`, `tickUpper`, `tickCurrent`): `Object`

Parameters

| Name | Type |
| :------ | :------ |
| `liquidity` | `bigint` |
| `tickLower` | `number` |
| `tickUpper` | `number` |
| `tickCurrent` | `number` |

Returns

`Object`

| Name | Type |
| :------ | :------ |
| `amount0` | `bigint` |
| `amount1` | `bigint` |

___

### createDrift

‚ñ∏ **createDrift**(`params`): `Drift`

Creates a read-only Drift instance with only public client

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Omit`\<`CreateDriftParams`, ``"walletClient"``\> | Parameters with only publicClient |

Returns

`Drift`

Drift instance for read-only operations

**`Throws`**

Error if publicClient.chain is not configured

‚ñ∏ **createDrift**(`params`): `Drift`\<`ReadWriteAdapter`\>

Creates a read-write Drift instance with both public and wallet clients

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Required`\<`CreateDriftParams`\> | Parameters with both publicClient and walletClient |

Returns

`Drift`\<`ReadWriteAdapter`\>

Drift instance for read and write operations

**`Throws`**

Error if publicClient.chain is not configured

___

### createFlaunch

‚ñ∏ **createFlaunch**(`params`): `ReadFlaunchSDK`

Creates a read-only Flaunch SDK instance with only public client

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Omit`\<`CreateFlaunchParams`, ``"walletClient"``\> | Parameters with only publicClient |

Returns

`ReadFlaunchSDK`

ReadFlaunchSDK for read-only operations

**`Throws`**

Error if publicClient.chain is not configured

‚ñ∏ **createFlaunch**(`params`): `ReadWriteFlaunchSDK`

Creates a read-write Flaunch SDK instance with both public and wallet clients

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Required`\<`CreateFlaunchParams`\> | Parameters with both publicClient and walletClient |

Returns

`ReadWriteFlaunchSDK`

ReadWriteFlaunchSDK for read and write operations

**`Throws`**

Error if publicClient.chain is not configured

___

### generateTokenUri

‚ñ∏ **generateTokenUri**(`name`, `params`): `Promise`\<`string`\>

Parameters

| Name | Type |
| :------ | :------ |
| `name` | `string` |
| `params` | `IPFSParams` |

Returns

`Promise`\<`string`\>

___

### getPoolId

‚ñ∏ **getPoolId**(`poolKey`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `poolKey` | `PoolKey` |

Returns

\`0x$\{string}\`

___

### getSqrtPriceX96FromTick

‚ñ∏ **getSqrtPriceX96FromTick**(`tick`): `bigint`

Parameters

| Name | Type |
| :------ | :------ |
| `tick` | `number` |

Returns

`bigint`

___

### getValidTick

‚ñ∏ **getValidTick**(`¬´destructured¬ª`): `number`

Parameters

| Name | Type |
| :------ | :------ |
| `¬´destructured¬ª` | `Object` |
| ‚Ä∫¬†`roundDown` | `boolean` |
| ‚Ä∫¬†`tick` | `number` |
| ‚Ä∫¬†`tickSpacing` | `number` |

Returns

`number`

___

### orderPoolKey

‚ñ∏ **orderPoolKey**(`poolKey`): `Object`

Parameters

| Name | Type |
| :------ | :------ |
| `poolKey` | `PoolKey` |

Returns

`Object`

| Name | Type |
| :------ | :------ |
| `currency0` | \`0x$\{string}\` |
| `currency1` | \`0x$\{string}\` |
| `fee` | `number` |
| `hooks` | \`0x$\{string}\` |
| `tickSpacing` | `number` |

___

### resolveIPFS

‚ñ∏ **resolveIPFS**(`value`): `string`

Parameters

| Name | Type |
| :------ | :------ |
| `value` | `string` |

Returns

`string`

___

### uint256ToBytes32

‚ñ∏ **uint256ToBytes32**(`value`): \`0x$\{string}\`

Parameters

| Name | Type |
| :------ | :------ |
| `value` | `bigint` |

Returns

\`0x$\{string}\`

___

### uploadFileToIPFS

‚ñ∏ **uploadFileToIPFS**(`params`): `Promise`\<`UploadResponse`\>

Uploads a file to IPFS using Pinata

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Configuration and file data |
| `params.file` | `File` | - |
| `params.metadata?` | `Record`\<`string`, `string`\> | - |
| `params.name?` | `string` | - |
| `params.pinataConfig` | `PinataConfig` | - |

Returns

`Promise`\<`UploadResponse`\>

Upload response with CID and other details

___

### uploadImageToIPFS

‚ñ∏ **uploadImageToIPFS**(`params`): `Promise`\<`UploadResponse`\>

Uploads a base64 image to IPFS using Pinata

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Configuration and base64 image data |
| `params.base64Image` | `string` | - |
| `params.metadata?` | `Record`\<`string`, `string`\> | - |
| `params.name?` | `string` | - |
| `params.pinataConfig` | `PinataConfig` | - |

Returns

`Promise`\<`UploadResponse`\>

Upload response with CID and other details

___

### uploadJsonToIPFS

‚ñ∏ **uploadJsonToIPFS**(`params`): `Promise`\<`UploadResponse`\>

Uploads JSON data to IPFS using Pinata

Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `params` | `Object` | Configuration and JSON data |
| `params.json` | `Record`\<`string`, `any`\> | - |
| `params.metadata?` | `Record`\<`string`, `string`\> | - |
| `params.name?` | `string` | - |
| `params.pinataConfig` | `PinataConfig` | - |

Returns

`Promise`\<`UploadResponse`\>

Upload response with CID and other details



---

